#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ScreenPass.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(ViewParams)

float ParticleAlpha;
float4 Color;
Texture2D ParticleTexture;
SamplerState InputSampler;

float2 PosToUV(float2 Pos)
{
	// Viewport 기준으로 UV를 계산합니다.
	float2 ViewportUV = (Pos - ViewParams_ViewportMin) * ViewParams_ViewportSizeInverse;
	return ViewportUV * ViewParams_UVViewportSize + ViewParams_UVViewportMin;
}

void RectVSMain(
	in float2 InPosition : ATTRIBUTE0,
	in float4 InColor : ATTRIBUTE1,
	out float4 OutPosition : SV_POSITION,
	out float4 OutColor : COLOR0
)
{
	OutPosition = float4(InPosition, 0, 1);
	OutColor = InColor;
}


void RectPSMain(
	float4 InPosition : SV_POSITION,
	in float4 InColor : COLOR0,
	out float4 OutParticleColor : SV_TARGET0
	)
{

	//ParticleTexture = ParticleTexture;
	// if (Color.b > 0){
	float2 UV = PosToUV(InPosition);
	float4 OriginalParticleSample = Texture2DSample(ParticleTexture, InputSampler, UV);

	OutParticleColor = float4(0.0, 0.0, 0.0, 1.0);
	// OutParticleColor = float4(OriginalParticleSample.rgb * ParticleAlpha, 1.0);


}